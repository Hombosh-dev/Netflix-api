## Comment

<?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Gate;
use App\Models\Comment;
use App\Models\User;

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Логіка для створення Comment (наприклад, зареєстрований користувач)
            return $user !== null;
        });

        Gate::define('viewAny', function (User $user) {
            // Дозволити перегляд для всіх користувачів
            return true;
        });

        Gate::define('view', function (User $user, Comment $comment) {
            // Логіка для перегляду Comment
            return true;
        });

        Gate::define('update', function (User $user, Comment $comment) {
            // Наприклад, лише власник коментаря може редагувати його
            return $user->id === $comment->user_id;
        });

        Gate::define('delete', function (User $user, Comment $comment) {
            // Наприклад, лише власник коментаря або адміністратор може видаляти
            return $user->id === $comment->user_id || $user->hasRole('admin');
        });
    }
}


## CommentLike


class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Дозволити створення, наприклад, для зареєстрованих користувачів
            return $user !== null;
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, CommentLike $like) {
            return true;
        });

        Gate::define('update', function (User $user, CommentLike $like) {
            // Наприклад, дозволити оновлювати лише власні записи лайків
            return $user->id === $like->user_id;
        });

        Gate::define('delete', function (User $user, CommentLike $like) {
            // Дозволити видалення власних лайків або адміністратору
            return $user->id === $like->user_id || $user->hasRole('admin');
        });
    }
}


## CommentReport

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            return $user !== null;
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, CommentReport $report) {
            return true;
        });

        Gate::define('update', function (User $user, CommentReport $report) {
            // Наприклад, тільки власник або адміністратор може оновлювати
            return $user->id === $report->user_id || $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, CommentReport $report) {
            // Наприклад, тільки власник або адміністратор може видаляти
            return $user->id === $report->user_id || $user->hasRole('admin');
        });
    }
}


## Episode

    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Наприклад, тільки адміністратор може створювати записи
            return $user->hasRole('admin');
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, Episode $episode) {
            return true;
        });

        Gate::define('update', function (User $user, Episode $episode) {
            return $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, Episode $episode) {
            return $user->hasRole('admin');
        });
    }
}

## MovieNotifications

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            return $user !== null;
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, MovieNotifications $notification) {
            return true;
        });

        Gate::define('update', function (User $user, MovieNotifications $notification) {
            return $user->id === $notification->user_id;
        });

        Gate::define('delete', function (User $user, MovieNotifications $notification) {
            return $user->id === $notification->user_id || $user->hasRole('admin');
        });
    }
}

## MovieTag

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            return $user !== null;
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, MovieTag $movieTag) {
            return true;
        });

        Gate::define('update', function (User $user, MovieTag $movieTag) {
            // Наприклад, оновлювати може лише користувач, який створив запис (якщо така логіка існує)
            return $user->id === $movieTag->user_id;
        });

        Gate::define('delete', function (User $user, MovieTag $movieTag) {
            return $user->id === $movieTag->user_id || $user->hasRole('admin');
        });
    }
}

## Ratings


class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Наприклад, створювати оцінки можуть лише зареєстровані користувачі
            return $user !== null;
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, Ratings $ratings) {
            return true;
        });

        Gate::define('update', function (User $user, Ratings $ratings) {
            // Наприклад, лише власник оцінки може її оновлювати
            return $user->id === $ratings->user_id;
        });

        Gate::define('delete', function (User $user, Ratings $ratings) {
            // Наприклад, лише власник оцінки або адміністратор може її видаляти
            return $user->id === $ratings->user_id || $user->hasRole('admin');
        });
    }
}


## People

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Наприклад, лише адміністратор може створювати записи
            return $user->hasRole('admin');
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, People $people) {
            return true;
        });

        Gate::define('update', function (User $user, People $people) {
            return $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, People $people) {
            return $user->hasRole('admin');
        });
    }
}

## Person

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Example: Only admin users can create pivot records
            return $user->hasRole('admin');
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, Person $person) {
            return true;
        });

        Gate::define('update', function (User $user, Person $person) {
            // Allow update only for admin users (customize as needed)
            return $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, Person $person) {
            return $user->hasRole('admin');
        });
    }
}

## Tags

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Example: only admin users can create tags
            return $user->hasRole('admin');
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, Tags $tag) {
            return true;
        });

        Gate::define('update', function (User $user, Tags $tag) {
            return $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, Tags $tag) {
            return $user->hasRole('admin');
        });
    }
}


## User


class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Example: Only admins can create new users
            return $user->hasRole('admin');
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, User $model) {
            // For example, users can view their own record or admins can view any record
            return $user->id === $model->id || $user->hasRole('admin');
        });

        Gate::define('update', function (User $user, User $model) {
            // Allow update if the user is updating their own profile or if admin
            return $user->id === $model->id || $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, User $model) {
            // Typically, only admin users can delete accounts
            return $user->hasRole('admin');
        });
    }
}


## UserList

class AuthServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('create', function (User $user) {
            // Example: only admins can create UserList records
            return $user->hasRole('admin');
        });

        Gate::define('viewAny', function (User $user) {
            return true;
        });

        Gate::define('view', function (User $user, UserList $userList) {
            return true;
        });

        Gate::define('update', function (User $user, UserList $userList) {
            return $user->hasRole('admin');
        });

        Gate::define('delete', function (User $user, UserList $userList) {
            return $user->hasRole('admin');
        });
    }
}
